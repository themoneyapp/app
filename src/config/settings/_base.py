"""
Django settings for themoneyapp project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from __future__ import annotations


import config._compact  # isort: skip  # noqa: F401

import logging
import typing as t
from pathlib import Path

import dj_database_url
import pydantic as pyd
from pydantic_settings import BaseSettings, SettingsConfigDict

from ._logger import get_logging_config


# Build paths inside the project like this: BASE_DIR / 'subdir'.
THIS_FILE = Path(__file__).resolve()
CONFIG_DIR = THIS_FILE.parent.parent
BASE_DIR = CONFIG_DIR.parent
PROJECT_ROOT = BASE_DIR.parent
APPS_DIR = BASE_DIR / "themoneyapp"


class BaseAppSettings(BaseSettings):
    model_config = SettingsConfigDict(
        case_sensitive=True,
        env_prefix="",
        validate_default=False,
    )


class AppSettings(BaseAppSettings):
    """App settings read from environment."""

    # base app settings
    SECRET_KEY: str
    REDIS_URL: pyd.RedisDsn
    DATABASE_URL: pyd.PostgresDsn
    ADMIN_URL: str = "admin/"
    # NOTE: making it configurable only for qa tools like mypy, ruff, etc
    DATA_DIR: str = "/data"
    LOG_DEBUG: bool = False
    LOG_FORMAT: t.Literal["json", "plain"] = "plain"

    # Admin settings
    ADMIN_EMAIL: pyd.EmailStr
    ADMIN_NAME: str = "TheMoneyApp Admin"
    ADMIN_EMAIL_SUBJECT_PREFIX: str = "[TheMoneyApp] "

    # Accounts
    ACCOUNT_ALLOW_REGISTRATION: bool = True

    # Email settings
    EMAIL_HOST: str
    EMAIL_PORT: int
    EMAIL_HOST_USER: str | None = None
    EMAIL_HOST_PASSWORD: str | None = None
    EMAIL_USE_TLS: bool = False
    EMAIL_USE_SSL: bool = False
    EMAIL_FROM_ADDRESS: pyd.EmailStr

    # CELERY settings
    # Recommended settings for reliability: https://gist.github.com/fjsj/da41321ac96cf28a96235cb20e7236f6
    # Sources:
    # - https://docs.celeryq.dev/en/stable/userguide/configuration.html
    # - https://bit.ly/celery-reliability
    # - https://denibertovic.com/posts/celery-best-practices/
    # - https://medium.com/squad-engineering/celery-in-production-three-more-years-of-fixing-bugs-2ee462cef39f
    # - https://engineering.instawork.com/celery-eta-tasks-demystified-424b836e4e94
    # - https://blog.wolt.com/engineering/2021/09/15/5-tips-for-writing-production-ready-celery-tasks/
    # - https://adamj.eu/tech/2020/02/03/common-celery-issues-on-django-projects/
    # - https://blog.daftcode.pl/working-with-asynchronous-celery-tasks-lessons-learned-32bb7495586b
    # - https://italux.medium.com/celery-rabbitmq-common-issues-a741a3800b30
    # - https://stackoverflow.com/questions/66978028/application-impacts-of-celery-workers-running-with-the-without-heartbeat-fla
    RABBITMQ_URL: pyd.AmqpDsn | None = None
    # Some cloud providers have low broker connection limits (e.g. cloudamqp),
    # to play safe, better to set the broker_pool_limit to 1.
    # The actual max number of connections used is equal to:
    # broker_pool_limit *
    # (web nodes * web processes + worker nodes * worker concurrency)
    CELERY_BROKER_POOL_LIMIT: int = 1
    # Some cloud providers require a timeout value longer than default one
    # for the broker connection (e.g. cloudamqp):
    CELERY_BROKER_CONNECTION_TIMEOUT: float = 30.0
    # Set the maximum number of Redis connections that your cloud provider requires.
    # Note this is specifc to the result backend, so you may actually use more:
    CELERY_REDIS_MAX_CONNECTIONS: int | None = None
    # THE MOST CRITICAL SETTING:
    # task_acks_late = True ensures tasks are automatically re-queued
    # in the event of a abrupt shutdown of the worker such as:
    # a power failure, a forced restart, worker instance being killed
    # during a deployment.
    # Note that you need to ensure your tasks are idempotent, to prevent repeated work.
    # See "Mixing reliability with Celery for delicious async tasks"
    # talk for more details:
    # https://bit.ly/celery-reliability
    CELERY_TASK_ACKS_LATE: bool = True
    # By default Celery will ack tasks that failed due to exceptions or timed out
    # (based on task_time_limit/time_limit). In general, that's the wanted behavior
    # because retries are the recommended way to handle intermittent task failures.
    # Since explicit is better than implicit, we keep the default True set here:
    CELERY_TASK_ACKS_ON_FAILURE_OR_TIMEOUT: bool = True
    # Below we keep Celery's default for tasks abruptly killed by a signal:
    # do not requeue the task. For projects with good task stability, no memory leaks,
    # no hanging workers, idempotent tasks, and continous deployments
    # (workers frequently interrupted), it's safer to set this to True
    # to avoid losing tasks:
    CELERY_TASK_REJECT_ON_WORKER_LOST: bool = False
    # Disable task prefetching for workers to increase reliability against lost tasks
    # at the cost of higher peak latency. A low prefetch multiplier also prevents
    # unbalanced workloads when some tasks are much slower than others.
    # See: https://docs.celeryq.dev/en/latest/userguide/optimizing.html#optimizing-prefetch-limit
    # Note that 0 means no prefetch limit: the worker will keep consuming messages,
    # not respecting that there may be other available worker nodes.
    CELERY_WORKER_PREFETCH_MULTIPLIER: int = 1
    # The number of concurrent worker processes executing tasks.
    # If you are doing mostly I/O you can have more processes, but if mostly CPU-bound,
    # better to leave as None, which means the number of CPUs/cores:
    CELERY_WORKER_CONCURRENCY: int | None = None
    # Automatically restart each worker process after 1000 tasks are processed on it.
    # This is possibly an overkill and introduces latency, but it's a good safety net
    # against memory leaks:
    CELERY_WORKER_MAX_TASKS_PER_CHILD: int = 100
    CELERY_EVENT_QUEUE_EXPIRES: float = 60.0
    CELERY_EVENT_QUEUE_TTL: float = 5.0

    # Below are two non-Celery settings that you should use and configure:
    # always have timeouts for HTTP requests (or any kind of I/O) that happens
    # inside Celery tasks. A task that blocks indefinitely may eventually
    # stop the worker instance from doing any other work. See warning at:
    # https://docs.celeryq.dev/en/stable/userguide/tasks.html
    # Note: you must manually read from those settings and configure
    # your HTTP client lib.
    # Alternatively, you can set CELERY_TASK_SOFT_TIME_LIMIT and CELERY_TASK_TIME_LIMIT,
    # but those introduce latency because they restart worker processes.
    TASK_HTTP_CONNECT_TIMEOUT: float = 5.0
    TASK_HTTP_READ_TIMEOUT: float = 120.0

    # Prefer RabbitMQ over Redis for Broker,
    # mainly because RabbitMQ doesn't need visibility timeout. See:
    # https://blog.daftcode.pl/working-with-asynchronous-celery-tasks-lessons-learned-32bb7495586b
    # https://engineering.instawork.com/celery-eta-tasks-demystified-424b836e4e94
    # https://github.com/celery/celery/issues/4400
    @property
    def CELERY_BROKER_URL(self) -> str:  # noqa: N802
        """Celery broker URL to use."""
        if self.RABBITMQ_URL is None:
            return str(self.REDIS_URL)

        return str(self.RABBITMQ_URL)


def base_dir_join(*args: str) -> Path:
    return BASE_DIR.joinpath(*args)


def app_dir_join(*args: str) -> Path:
    return APPS_DIR.joinpath(*args)


# ENVIRONMENT
# ------------------------------------------------------------------------------
app_settings = AppSettings()
DATA_DIR = Path(app_settings.DATA_DIR).resolve()
LOG_DEBUG = app_settings.LOG_DEBUG
LOG_FORMAT = app_settings.LOG_FORMAT
REDIS_URL = str(app_settings.REDIS_URL)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/


# GENERAL
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#debug
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = app_settings.SECRET_KEY
# https://docs.djangoproject.com/en/dev/ref/settings/#site-id
SITE_ID = 1

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

# https://docs.djangoproject.com/en/dev/ref/settings/#language-code
LANGUAGE_CODE = "en-us"
# Local time zone. Choices are
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# though not all of them may be available with every OS.
# In Windows, this must be set to your system time zone.
TIME_ZONE = "UTC"
# https://docs.djangoproject.com/en/dev/ref/settings/#use-i18n
USE_I18N = True
# https://docs.djangoproject.com/en/dev/ref/settings/#use-tz
USE_TZ = True


# DATABASES
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#databases
DATABASES = {
    "default": dj_database_url.parse(
        str(app_settings.DATABASE_URL),
        conn_max_age=600,
        conn_health_checks=True,
    ),
}
DATABASES["default"]["ATOMIC_REQUESTS"] = True
# Default primary key field type
# https://docs.djangoproject.com/en/stable/ref/settings/#std:setting-DEFAULT_AUTO_FIELD
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# URLS
# ------------------------------------------------------------------------------
ROOT_URLCONF = "config.urls"
WSGI_APPLICATION = "config.wsgi.application"


# APPS
# ------------------------------------------------------------------------------
DJANGO_APPS = [
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # "django.contrib.humanize", # Handy template tags
    "django.contrib.admin",
    "django.forms",
]
THIRD_PARTY_APPS = [
    "django_structlog",
    "allauth",
    "allauth.account",
    "allauth.mfa",
    "rest_framework",
    "corsheaders",
    "drf_spectacular",
]
LOCAL_APPS = [
    "themoneyapp",
    "themoneyapp.users",
    # Your stuff: custom apps go here
]
# https://docs.djangoproject.com/en/dev/ref/settings/#installed-apps
INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS


# MIGRATIONS
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#migration-modules
MIGRATION_MODULES: dict[str, t.Any] = {}


# AUTHENTICATION
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#authentication-backends
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]
# https://docs.djangoproject.com/en/dev/ref/settings/#auth-user-model
AUTH_USER_MODEL = "themoneyapp_users.User"
# https://docs.djangoproject.com/en/dev/ref/settings/#login-redirect-url
LOGIN_REDIRECT_URL = "themoneyapp_users:redirect"
# https://docs.djangoproject.com/en/dev/ref/settings/#login-url
LOGIN_URL = "account_login"


# PASSWORDS
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#password-hashers
PASSWORD_HASHERS = [
    # https://docs.djangoproject.com/en/dev/topics/auth/passwords/#using-argon2-with-django
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
]
# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"  # noqa: E501
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# MIDDLEWARE
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#middleware
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_structlog.middlewares.RequestMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]


# STATIC
# ------------------------------------------------------------------------------
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/dev/ref/settings/#static-root
STATIC_ROOT = base_dir_join("staticfiles")
# https://docs.djangoproject.com/en/dev/ref/settings/#static-url
STATIC_URL = "/static/"
# https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#std:setting-STATICFILES_DIRS
STATICFILES_DIRS = (app_dir_join("static"),)
# https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#staticfiles-finders
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]


# MEDIA
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#media-root
MEDIA_ROOT = app_dir_join("media")
# https://docs.djangoproject.com/en/dev/ref/settings/#media-url
MEDIA_URL = "/media/"


# TEMPLATES
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#templates
TEMPLATES = [
    {
        # https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-TEMPLATES-BACKEND
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        # https://docs.djangoproject.com/en/dev/ref/settings/#dirs
        "DIRS": [app_dir_join("templates")],
        # https://docs.djangoproject.com/en/dev/ref/settings/#app-dirs
        "APP_DIRS": True,
        "OPTIONS": {
            # https://docs.djangoproject.com/en/dev/ref/settings/#template-context-processors
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.template.context_processors.i18n",
                "django.template.context_processors.media",
                "django.template.context_processors.static",
                "django.template.context_processors.tz",
                "django.contrib.messages.context_processors.messages",
                "themoneyapp.users.context_processors.allauth_settings",
            ],
        },
    },
]

# https://docs.djangoproject.com/en/dev/ref/settings/#form-renderer
FORM_RENDERER = "django.forms.renderers.TemplatesSetting"


# FIXTURES
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#fixture-dirs
FIXTURE_DIRS = (app_dir_join("fixtures"),)


# SECURITY
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#session-cookie-httponly
SESSION_COOKIE_HTTPONLY = True
# https://docs.djangoproject.com/en/dev/ref/settings/#csrf-cookie-httponly
CSRF_COOKIE_HTTPONLY = True
# https://docs.djangoproject.com/en/dev/ref/settings/#x-frame-options
X_FRAME_OPTIONS = "DENY"


# EMAIL settings
# ------------------------------------------------------------------------------
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = app_settings.EMAIL_HOST
EMAIL_PORT = app_settings.EMAIL_PORT
EMAIL_HOST_USER = app_settings.EMAIL_HOST_USER
EMAIL_HOST_PASSWORD = app_settings.EMAIL_HOST_PASSWORD
EMAIL_USE_SSL = app_settings.EMAIL_USE_SSL
EMAIL_USE_TLS = app_settings.EMAIL_USE_TLS
# https://docs.djangoproject.com/en/dev/ref/settings/#default-from-email
DEFAULT_FROM_EMAIL = str(app_settings.EMAIL_FROM_ADDRESS)
# https://docs.djangoproject.com/en/dev/ref/settings/#server-email
SERVER_EMAIL = DEFAULT_FROM_EMAIL
# https://docs.djangoproject.com/en/dev/ref/settings/#email-subject-prefix
EMAIL_SUBJECT_PREFIX = app_settings.ADMIN_EMAIL_SUBJECT_PREFIX
# https://docs.djangoproject.com/en/dev/ref/settings/#email-timeout
EMAIL_TIMEOUT = 5


# ADMIN
# ------------------------------------------------------------------------------
# Django Admin URL.
ADMIN_URL = app_settings.ADMIN_URL
# https://docs.djangoproject.com/en/dev/ref/settings/#admins
ADMINS = [
    (app_settings.ADMIN_NAME, str(app_settings.ADMIN_EMAIL)),
]
# https://docs.djangoproject.com/en/dev/ref/settings/#managers
MANAGERS = ADMINS
# https://cookiecutter-django.readthedocs.io/en/latest/settings.html#other-environment-settings
# Force the `admin` sign in process to go through the `django-allauth` workflow
DJANGO_ADMIN_FORCE_ALLAUTH = False


# LOGGING
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#logging
# See https://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
# Logging
APP_LOG_LEVEL = logging.DEBUG if LOG_DEBUG else logging.INFO
LOG_DIR = DATA_DIR / "logs"
LOG_FILE = LOG_DIR / "app.log"
LOGGING = get_logging_config(
    str(LOG_FILE),
    loglevel=APP_LOG_LEVEL,
    json_logs=bool(LOG_FORMAT == "json"),
)
DJANGO_STRUCTLOG_CELERY_ENABLED = True
DJANGO_STRUCTLOG_STATUS_4XX_LOG_LEVEL = logging.WARNING


# Celery settings
# ------------------------------------------------------------------------------
# Recommended settings for reliability: https://gist.github.com/fjsj/da41321ac96cf28a96235cb20e7236f6
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#std:setting-broker_url
if USE_TZ:
    # https://docs.celeryq.dev/en/stable/userguide/configuration.html#std:setting-timezone
    CELERY_TIMEZONE = TIME_ZONE
CELERY_BROKER_URL = app_settings.CELERY_BROKER_URL
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#std:setting-accept_content
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_WORKER_HIJACK_ROOT_LOGGER = False

# When RabbitMQ is stressed (out of memory or disk space)
# task.delay/task.apply_async calls will fail silently if
# confirm_publish is set to False, which is the default. It's better to fail
# loud than silently when this happens See:
# https://github.com/celery/celery/issues/5410
# If confirm_timeout passes, a socket.timeout exception is raised:
CELERY_BROKER_TRANSPORT_OPTIONS = {"confirm_publish": True, "confirm_timeout": 5.0}
CELERY_BROKER_POOL_LIMIT = app_settings.CELERY_BROKER_POOL_LIMIT
CELERY_BROKER_CONNECTION_TIMEOUT = app_settings.CELERY_BROKER_CONNECTION_TIMEOUT

# celery Result settings
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#std:setting-result_serializer
CELERY_RESULT_SERIALIZER = "json"
# Prefer Redis over RabbitMQ for result backend,
# as Redis is better suited to work as a key-value store:
CELERY_RESULT_BACKEND = REDIS_URL
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#result-extended
CELERY_RESULT_EXTENDED = True
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#result-backend-always-retry
# https://github.com/celery/celery/pull/6122
CELERY_RESULT_BACKEND_ALWAYS_RETRY = True
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#result-backend-max-retries
CELERY_RESULT_BACKEND_MAX_RETRIES = 10
CELERY_REDIS_MAX_CONNECTIONS = app_settings.CELERY_REDIS_MAX_CONNECTIONS

# celery task settings
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#std:setting-task_serializer
CELERY_TASK_SERIALIZER = "json"
CELERY_TASK_ACKS_LATE = app_settings.CELERY_TASK_ACKS_LATE
CELERY_TASK_ACKS_ON_FAILURE_OR_TIMEOUT = (
    app_settings.CELERY_TASK_ACKS_ON_FAILURE_OR_TIMEOUT
)
CELERY_TASK_REJECT_ON_WORKER_LOST = app_settings.CELERY_TASK_REJECT_ON_WORKER_LOST
CELERY_WORKER_PREFETCH_MULTIPLIER = app_settings.CELERY_WORKER_PREFETCH_MULTIPLIER
CELERY_WORKER_CONCURRENCY = app_settings.CELERY_WORKER_CONCURRENCY
CELERY_SEND_TASK_ERROR_EMAILS = True
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#std-setting-task_send_sent_event
CELERY_TASK_SEND_SENT_EVENT = True
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#worker-send-task-events
CELERY_WORKER_SEND_TASK_EVENTS = True
CELERY_WORKER_MAX_TASKS_PER_CHILD = app_settings.CELERY_WORKER_MAX_TASKS_PER_CHILD
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#task-time-limit
# TODO:  # noqa: TD002,FIX002,TD003
# set to whatever value is adequate in your circumstances
CELERY_TASK_TIME_LIMIT = 5 * 60
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#task-soft-time-limit
# TODO: # noqa: TD002,FIX002,TD003
# set to whatever value is adequate in your circumstances
CELERY_TASK_SOFT_TIME_LIMIT = 60

CELERY_EVENT_QUEUE_EXPIRES = app_settings.CELERY_EVENT_QUEUE_EXPIRES
CELERY_EVENT_QUEUE_TTL = app_settings.CELERY_EVENT_QUEUE_TTL


# django-allauth
# ------------------------------------------------------------------------------
# https://docs.allauth.org/en/latest/account/configuration.html
ACCOUNT_ALLOW_REGISTRATION = app_settings.ACCOUNT_ALLOW_REGISTRATION
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_SUBJECT_PREFIX = EMAIL_SUBJECT_PREFIX
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_REAUTHENTICATION_REQUIRED = True
ACCOUNT_CHANGE_EMAIL = True
ACCOUNT_CONFIRM_EMAIL_ON_GET = False
ACCOUNT_EMAIL_NOTIFICATIONS = True
ACCOUNT_EMAIL_UNKNOWN_ACCOUNTS = True
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1
ACCOUNT_ADAPTER = "themoneyapp.users.adapters.AccountAdapter"
ACCOUNT_FORMS = {
    "signup": "themoneyapp.users.forms.UserSignupForm",
}
# https://docs.allauth.org/en/latest/mfa/configuration.html
MFA_TOTP_ISSUER = "The Money App"


# django-rest-framework
# -------------------------------------------------------------------------------
# django-rest-framework - https://www.django-rest-framework.org/api-guide/settings/
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
}

# django-cors-headers - https://github.com/adamchainz/django-cors-headers#setup
CORS_URLS_REGEX = r"^/api/.*$"

# By Default swagger ui is available only to admin user(s). You can change permission
# classes to change that
# See more configuration options at https://drf-spectacular.readthedocs.io/en/latest/settings.html#settings
SPECTACULAR_SETTINGS: dict[str, t.Any] = {
    "TITLE": "TheMoneyApp API",
    "DESCRIPTION": "Documentation of API endpoints of TheMoneyApp",
    "VERSION": "1.0.0",
    "SERVE_PERMISSIONS": ["rest_framework.permissions.AllowAny"],
    "SCHEMA_PATH_PREFIX": "/api/v[0-9]/",
}


# django-webpack-loader
# ------------------------------------------------------------------------------
INSTALLED_APPS += ["webpack_loader"]
WEBPACK_LOADER = {
    "DEFAULT": {
        "BUNDLE_DIR_NAME": "webpack_bundles/",
        "CACHE": True,
        "STATS_FILE": PROJECT_ROOT / "webpack-stats.json",
        "POLL_INTERVAL": 0.1,
        "IGNORE": [r".+\.hot-update.js", r".+\.map"],
    },
}


# Your stuff...
# ------------------------------------------------------------------------------
